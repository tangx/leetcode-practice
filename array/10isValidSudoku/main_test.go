package sudoku10

/*
有效的数独
请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
数独部分空格内已填入了数字，空白格用 '.' 表示。

注意：

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。


示例 1：


输入：board =
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：true
示例 2：

输入：board =
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。


提示：

board.length == 9
board[i].length == 9
board[i][j] 是一位数字或者 '.'

作者：力扣 (LeetCode)
链接：https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2f9gg/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
*/

import (
	"fmt"
	"testing"
)

var board1 = [][]byte{
	{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
	{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
	{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
	{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
	{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
	{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
	{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
	{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
}

var board2 = [][]byte{
	{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
	{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
	{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
	{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
	{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
	{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
	{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
	{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
}

func Test_IsValidSudodu(t *testing.T) {
	for _, board := range [][][]byte{
		board1,
		board2,
	} {
		ok := isValidSudoku(board)
		fmt.Println(ok)
	}
}

func isValidSudoku(board [][]byte) bool {
	// cell[i][j] // 一纬

	/*
		seti[0][5]=true // seti[i][val]=true
		0: 第 0 行
		5: 单元格数字 5
		true: 存在 / false: 不存在

		第「0」行有数字「5」存在。
	*/

	// 数独的大小是固定的， 所以用数组而非切片
	// 行
	seti := [9][9]bool{}
	// 列
	setj := [9][9]bool{}

	/*
		将大九宫81格分成9个小九宫9格
		0 1 2
		3 4 5
		6 7 8

		setk[k][val]=true
		计算方式:
		k:=i/3+(j/3)*3
			i=4,j=0 -> 1+0*3=1
			i=0,j=4 -> 0+1*3=3
	*/
	// 小九宫格
	setk := [9][9]bool{}

	for i := 0; i < len(board); i++ {

		// 二纬
		for j := 0; j < len(board[i]); j++ {

			// 点就略过
			if board[i][j] == '.' {
				continue
			}

			/*
				val := board[i][j]

				因为原值是 byte 类型， 因此超出了 1-9 的范围。
				panic: runtime error: index out of range [56] with length 9 [recovered]
				panic: runtime error: index out of range [56] with length 9

				1. 「 - '0' 」 确认 1-9 的范围
				2. 「 - 1 」 数组各自从 0 开始
			*/
			val := board[i][j] - '0' - 1

			k := i/3 + j/3*3

			// 如果 行， 列， 小九宫 中有 val 值， 则为不合法
			if seti[i][val] || setj[j][val] || setk[k][val] {
				return false
			}

			// val 不层出现， 设置 flag
			seti[i][val], setj[j][val], setk[k][val] = true, true, true
		}

	}
	return true
}
